!<arch>
0-isupper.c/    0           0     0     644     237       `
#include "main.h"

/**
* _isupper - Checks for uppercase character
* @c: The number to be checked
*
* Return: 1 if uppercase. 0 otherwise
*/

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     331       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: pointer to the destination object
 * @b: value to be filled
 * @n: number of bytes to be filled
 *
 * Return: pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	while (n--)
	{
		*p++ = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     462       `
#include "main.h"
#include <stddef.h>

/**
 * _strcat - concatenates two strings
 * @dest: The destination
 * @src: The file to be concatenated
 *
 * Return: A pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	char *start = dest;

	if (dest == NULL)
		return (NULL);

	if (src == NULL)
		return (NULL);

	while (*start != '\0')
	{
		start++;
	}

	while (*src != '\0')
	{
		*start++ = *src++;
	}

	*start = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     387       `
#include "main.h"

/**
 * _atoi - string to be converted
 * @s: The string to be converted
 *
 * Return: Integer value of the converted string
 */
int _atoi(char *s)
{
	int sign = 1;

	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}

1-isdigit.c/    0           0     0     644     246       `
#include "main.h"

/**
 * _isdigit - Checks for a digit (0 through 9)
 * @c: The number to be checked
 *
 * Return: 1 if it's a digit. 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     453       `
#include "main.h"
#include <stddef.h>
/**
 * _memcpy -  copies memory area
 * @dest: pointer to destination
 * @src: pointer to source
 * @n: number of bytes to copy
 *
 * Return: value of dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *dest_char = (char *)dest;
	char *src_char = (char *)src;

	if ((dest_char != NULL) && (src_char != NULL))
	{
		while (n)
		{
			*(dest_char++) = (*src_char++);
			--n;
		}
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     537       `
#include "main.h"
#include <stddef.h>

/**
 * _strncat - concatenates two strings
 * @dest: pointer to the destination string
 * @src: pointer to the source array
 * @n: maximum number of characters that can be appended
 *
 * Return: value of dest
 */
char *_strncat(char *dest, char *src, int n)
{
	char *end = dest;

	if (dest == NULL)
		return (NULL);
	if (src == NULL)
		return (NULL);

	while (*end != '\0')
	{
		end++;
	}

	while (n--)
	{
		while (!(*end++ = *src++))
		{
			return (dest);
		}
	}

	*end = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     342       `
#include "main.h"
#include <stddef.h>

/**
 * _strchr - locates a character in a string
 * @s: The string
 * @c: The character to be checked
 *
 * Return: pointer to the first occurrence of the character
 */
char *_strchr(char *s, char c)
{
	while ((*s != c) && (*s != '\0'))
	{
		s++;
	}
	if (*s == c)
		return (s);
	else
		return (NULL);
}
2-strlen.c/     0           0     0     644     248       `
#include "main.h"

/**
 * _strlen - returns length of a string
 * @s: The characters to be checked
 *
 * Return: length of a string
 */
int _strlen(char *s)
{
	unsigned int count = 0;

	while (*s != '\0')
	{
		count++;
		s++;
	}
	return (count);
}
2-strncpy.c/    0           0     0     644     475       `
#include "main.h"
#include <stddef.h>

/**
* _strncpy - copies a string
* @dest: pointer to the destination array where the contents is be copied
* @src: pointer to the source string which will be copied
* @n: first n character copied from the src to dest
*
* Return: pointer to the dest string
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	for (; n > i; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     241       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 *@c: The number to be checked
 *
 * Return: 1 if it's true. 0 otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     221       `
#include "main.h"

/**
 * _puts - prints a string followed by a new line to stdout
 *@str: To be checked
 *
 * Return: nothing
 */
void _puts(char *str)
{
	while (*str)
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     297       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: The first parameter
 * @s2: The second parameter
 *
 * Return: 0
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}
	return (0);
}

3-strspn.c/     0           0     0     644     431       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: The string to be checked
 * @accept: The bytes to be checked
 *
 * Return: number of bytes in the initial segment of s which
 * consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	char *p;
	int n = 0;

	for (n = 0; *s; s++, n++)
	{
		for (p = accept; *p && *p != *s; p++)
			;
		if (!*p)
			break;

	}
	return (n);
}

4-isalpha.c/    0           0     0     644     306       `
#include "main.h"

/**
 * _isalpha - checks if character is an alphabetic character
 * @c: The character to be checked
 *
 * Return: 1 if it's an alphabetic character. 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     498       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: The string
 * @accept: The bytes in the string
 *
 * Return: pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	if ((s == NULL) && (accept == NULL))
		return (NULL);

	while (*s)
	{
		if (strchr(accept, *s))
		{
			return (s);
		}
		else
		{
			s++;
		}
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     581       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - locates a substring
 * @haystack: The string
 * @needle: The substring to be checked
 *
 * Return: pointer to the beginning of the located substring,
 * or NULL if the substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
	if (*needle == '\0')
		return ((char *)haystack);

	while (*haystack)
	{
		char *h_ptr = haystack;
		char *n_ptr = needle;

		while (*n_ptr && (*h_ptr == *n_ptr))
		{
			h_ptr++;
			n_ptr++;
		}

		if (*n_ptr == '\0')
			return ((char *)haystack);

		haystack++;
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     183       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @x: The number to be checked
 *
 * Return: Always 0.
 */
int _abs(int x)
{
	return ((x < 0) ? -x : x);
}

9-strcpy.c/     0           0     0     644     393       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src, including
 * the terminating null byte (\0), to the buffer pointed to by dest
 * @dest: The destination
 * @src: The copied
 *
 * Return: The pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	char *start = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';
	return (start);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return	(write(1, &c, 1));
}

